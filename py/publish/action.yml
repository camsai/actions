---

name: Publish Git Release and Python Package
description: Publishes a new version of a python package to PyPI
inputs:
  python-version:
    description: Version of Python to use
    required: true
  github-token:
    description: Grants access to publish releases to github
    required: true
  pypi-username:
    description: Username on PyPI
    required: false
    default: ''
  pypi-password:
    description: Password of PyPI user
    required: false
    default: ''
  pypi-api-token:
    description: API Token of PyPI user
    required: false
    default: ''
  publish-tag:
    description: Publish tag and release before publishing to PyPI
    required: true
    default: 'true'
  publish-to-pypi:
    description: Whether to only publish as a GitHub release
    required: true
    default: 'true'

runs:
  using: composite
  steps:

    - name: Configure Repository
      uses: ./actions/git/config
      with:
        github-token: ${{ inputs.github-token }}
    - name: Determine git tag
      id: get-tag-name
      uses: ./actions/git/version

    # Only one of the two steps below should run depending on the `publish-tag` value
    # B/c setuptools scm requires a tag it has to be created, but for dual-purpose JS/PY
    # packages, the tag may be published as part of JS pipeline, hence the tag-only case
    - name: Publish new git tag and release
      if: inputs.publish-tag == 'true'
      uses: ./actions/git/release
      with:
        github-token: ${{ inputs.github-token }}
        tag-name: ${{ steps.get-tag-name.outputs.tag-name }}
    - name: Only create new git tag locally for Setuptools SCM versioning logic
      if: inputs.publish-tag != 'true'
      uses: ./actions/git/release
      with:
        github-token: ${{ inputs.github-token }}
        tag-name: ${{ steps.get-tag-name.outputs.tag-name }}
        skip-publish: 'true'

    - name: Setup Python ${{ inputs.python-version }}
      if: inputs.pypi-api-token != '' && inputs.publish-to-pypi == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    - name: Setup Python Environment
      if: inputs.pypi-api-token != '' && inputs.publish-to-pypi == 'true'
      uses: ./actions/py/env
    - name: Install Dependencies
      if: inputs.pypi-api-token != '' && inputs.publish-to-pypi == 'true'
      shell: bash -l {0}
      run: |
        python -m pip install \
          pip==${PIP_VERSION} \
          build==${BUILD_VERSION} \
          twine==${TWINE_VERSION}
    - name: Debug git repository
      if: inputs.pypi-api-token != '' && inputs.publish-to-pypi == 'true'
      shell: bash -l {0}
      run: |
        git log -n 1
        git status
    - name: Build Package
      if: inputs.pypi-api-token != '' && inputs.publish-to-pypi == 'true'
      shell: bash -l {0}
      run: python -m build
    - name: Publish Package
      if: inputs.pypi-api-token != '' && inputs.publish-to-pypi == 'true'
      shell: bash -l {0}
      run: twine upload dist/*
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ inputs.pypi-api-token }}
